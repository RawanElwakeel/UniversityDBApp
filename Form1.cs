using System;
using System.Data;
using System.Windows.Forms;
using MySql.Data.MySqlClient;
using System.IO;

namespace UniversityDBApp
{
    public partial class Form1 : Form
    {
        private MySqlConnection connection;
        private string connectionString = "server=localhost;user=root;database=UniversityDB;port=3306;password=root123;";

        public Form1()
        {
            InitializeComponent(); // Generated by Form Designer
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            try
            {
                connection = new MySqlConnection(connectionString);
                connection.Open();
                MessageBox.Show("Connected to MySQL database!");
                LoadStudents();
            }
            catch (Exception ex)
            {
                MessageBox.Show("Connection failed: " + ex.Message);
            }
        }

        private void LoadStudents()
        {
            try
            {
                string query = "SELECT s.Student_ID, p.F_name, p.L_name, s.Grade, s.Date_of_birth FROM STUDENT s JOIN PERSON p ON s.SSN = p.SSN";
                MySqlDataAdapter adapter = new MySqlDataAdapter(query, connection);
                DataTable dt = new DataTable();
                adapter.Fill(dt);
                dataGridViewStudents.DataSource = dt;
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error loading students: " + ex.Message);
            }
        }

        private void btnInsert_Click(object sender, EventArgs e)
        {
            try
            {
                string ssn = txtSSN.Text;
                string fname = txtFName.Text;
                string lname = txtLName.Text;
                string grade = txtGrade.Text;
                string dob = txtDOB.Text;
                string password = txtPassword.Text;

                if (string.IsNullOrEmpty(ssn) || string.IsNullOrEmpty(fname) || string.IsNullOrEmpty(lname) ||
                    string.IsNullOrEmpty(grade) || string.IsNullOrEmpty(dob) || string.IsNullOrEmpty(password))
                {
                    MessageBox.Show("Please fill all fields.");
                    return;
                }

                string insertPerson = "INSERT INTO PERSON (SSN, F_name, L_name, Name, Person_type, Password) VALUES (@SSN, @FName, @LName, @Name, 'Student', @Password)";
                using (MySqlCommand cmdPerson = new MySqlCommand(insertPerson, connection))
                {
                    cmdPerson.Parameters.AddWithValue("@SSN", ssn);
                    cmdPerson.Parameters.AddWithValue("@FName", fname);
                    cmdPerson.Parameters.AddWithValue("@LName", lname);
                    cmdPerson.Parameters.AddWithValue("@Name", fname + " " + lname);
                    cmdPerson.Parameters.AddWithValue("@Password", password);
                    cmdPerson.ExecuteNonQuery();
                }

                string insertStudent = "INSERT INTO STUDENT (SSN, Grade, Date_of_birth) VALUES (@SSN, @Grade, @DOB)";
                using (MySqlCommand cmdStudent = new MySqlCommand(insertStudent, connection))
                {
                    cmdStudent.Parameters.AddWithValue("@SSN", ssn);
                    cmdStudent.Parameters.AddWithValue("@Grade", Convert.ToDecimal(grade));
                    cmdStudent.Parameters.AddWithValue("@DOB", Convert.ToDateTime(dob));
                    cmdStudent.ExecuteNonQuery();
                }

                MessageBox.Show("Student added successfully!");
                LoadStudents();
                ClearInputs();
            }
            catch (Exception ex)
            {
                MessageBox.Show("Insert failed: " + ex.Message);
            }
        }

        private void btnUpdate_Click(object sender, EventArgs e)
        {
            try
            {
                string studentId = txtStudentID.Text;
                string grade = txtGrade.Text;
                string dob = txtDOB.Text;

                if (string.IsNullOrEmpty(studentId) || string.IsNullOrEmpty(grade) || string.IsNullOrEmpty(dob))
                {
                    MessageBox.Show("Please fill Student ID, Grade, and Date of Birth.");
                    return;
                }

                string updateStudent = "UPDATE STUDENT SET Grade = @Grade, Date_of_birth = @DOB WHERE Student_ID = @StudentID";
                using (MySqlCommand cmd = new MySqlCommand(updateStudent, connection))
                {
                    cmd.Parameters.AddWithValue("@Grade", Convert.ToDecimal(grade));
                    cmd.Parameters.AddWithValue("@DOB", Convert.ToDateTime(dob));
                    cmd.Parameters.AddWithValue("@StudentID", Convert.ToInt32(studentId));
                    cmd.ExecuteNonQuery();
                }

                MessageBox.Show("Student updated successfully!");
                LoadStudents();
                ClearInputs();
            }
            catch (Exception ex)
            {
                MessageBox.Show("Update failed: " + ex.Message);
            }
        }

        private void btnDelete_Click(object sender, EventArgs e)
        {
            try
            {
                string studentId = txtStudentID.Text;

                if (string.IsNullOrEmpty(studentId))
                {
                    MessageBox.Show("Please enter Student ID.");
                    return;
                }

                string deleteStudent = "DELETE FROM STUDENT WHERE Student_ID = @StudentID";
                using (MySqlCommand cmdStudent = new MySqlCommand(deleteStudent, connection))
                {
                    cmdStudent.Parameters.AddWithValue("@StudentID", Convert.ToInt32(studentId));
                    cmdStudent.ExecuteNonQuery();
                }

                string deletePerson = "DELETE FROM PERSON WHERE SSN IN (SELECT SSN FROM STUDENT WHERE Student_ID = @StudentID)";
                using (MySqlCommand cmdPerson = new MySqlCommand(deletePerson, connection))
                {
                    cmdPerson.Parameters.AddWithValue("@StudentID", Convert.ToInt32(studentId));
                    cmdPerson.ExecuteNonQuery();
                }

                MessageBox.Show("Student deleted successfully!");
                LoadStudents();
                ClearInputs();
            }
            catch (Exception ex)
            {
                MessageBox.Show("Delete failed: " + ex.Message);
            }
        }

        private void btnGenerateReport_Click(object sender, EventArgs e)
        {
            try
            {
                string query = @"
                    SELECT p.F_name, p.L_name, s.Grade, s.Date_of_birth, m.Name AS Major
                    FROM STUDENT s
                    JOIN PERSON p ON s.SSN = p.SSN
                    LEFT JOIN APPLICATION a ON s.Student_ID = a.Student_ID
                    LEFT JOIN ADMISSION ad ON a.Application_ID = ad.Application_ID
                    LEFT JOIN PROGRAM_MAJOR pm ON ad.Admission_ID = pm.Program_ID
                    LEFT JOIN MAJOR m ON pm.Major_ID = m.Major_ID";
                MySqlDataAdapter adapter = new MySqlDataAdapter(query, connection);
                DataTable dt = new DataTable();
                adapter.Fill(dt);

                string reportPath = "StudentReport.txt";
                using (StreamWriter sw = new StreamWriter(reportPath))
                {
                    sw.WriteLine("Student Report - " + DateTime.Now.ToString("yyyy-MM-dd"));
                    sw.WriteLine("=================================");
                    foreach (DataRow row in dt.Rows)
                    {
                        sw.WriteLine($"Name: {row["F_name"]} {row["L_name"]}");
                        sw.WriteLine($"Grade: {row["Grade"]}");
                        sw.WriteLine($"Date of Birth: {row["Date_of_birth"]}");
                        sw.WriteLine($"Major: {(row["Major"] != DBNull.Value ? row["Major"] : "Not Assigned")}");
                        sw.WriteLine("---------------------------------");
                    }
                }

                MessageBox.Show($"Report generated at {reportPath}");
            }
            catch (Exception ex)
            {
                MessageBox.Show("Report generation failed: " + ex.Message);
            }
        }

        private void ClearInputs()
        {
            txtStudentID.Clear();
            txtSSN.Clear();
            txtFName.Clear();
            txtLName.Clear();
            txtGrade.Clear();
            txtDOB.Clear();
            txtPassword.Clear();
        }

        private void Form1_FormClosing(object sender, FormClosingEventArgs e)
        {
            connection?.Close();
        }
    }
}